# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
  
variables:
  subscription: ankur-terra-deploy
  resourceGroup: tfstate1
  storageAccount: mystorageank5647
  container: tfstate1
  tfstateFile: terraform.tfstate

steps:


- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: Install Terraform latest
  inputs:
    terraformVersion: '1.2.3'

- task: TerraformTaskV1@2
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    commandOptions: '-reconfigure'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: '$(tfstateFile)'
    

- task: TerraformTaskV1@2
  displayName: terraofrm plan -out=main.tfplan
  inputs:
    provider: 'azurerm'
    command: plan
    commandOptions: '-out=main.tfplan'
    workingDirectory: '$(System.DefaultWorkingDirectory)'


- task: TerraformTaskV1@2
  displayName: terraform apply main.tfplan
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: main.tfplan
    workingDirectory: '$(System.DefaultWorkingDirectory)'